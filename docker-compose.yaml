services:
  postgres:
    image: postgres:14-alpine
    container_name: task_mgmt_postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB_USER:-admin}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-defaultpassword}
      POSTGRES_DB: ${DB_NAME:-task_management_db} 
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./setup.sql:/docker-entrypoint-initdb.d/setup.sql
    networks:
      - app_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-admin}"]
      interval: 10s
      timeout: 5s
      retries: 5

  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: task_mgmt_api
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - gunicorn_logs:/var/log/gunicorn
      - supervisor_logs:/var/log/supervisor
    environment:
      - SQLALCHEMY_DATABASE_URI=postgresql://${DB_USER:-admin}:${DB_PASSWORD:-defaultpassword}@postgres:5432/${DB_NAME:-task_management_db}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-super-secret-key}
      - FLASK_APP=app.py
      - FLASK_ENV=${FLASK_ENV:-production}
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      
  nginx:
    image: nginx:alpine
    container_name: task_mgmt_nginx
    restart: unless-stopped
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    volumes:
      - ./deployment/nginx:/etc/nginx/conf.d
      - ./deployment/ssl:/etc/nginx/ssl
      - nginx_logs:/var/log/nginx
      - ./deployment/certbot/conf:/etc/letsencrypt
      - ./deployment/certbot/www:/var/www/certbot
    depends_on:
      - api
    networks:
      - app_network
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"

  certbot:
    image: certbot/certbot
    container_name: task_mgmt_certbot
    volumes:
      - ./deployment/certbot/conf:/etc/letsencrypt
      - ./deployment/certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    profiles:
      - production

networks:
  app_network:
    driver: bridge

volumes:
  postgres_data:
  gunicorn_logs:
  supervisor_logs:
  nginx_logs:
